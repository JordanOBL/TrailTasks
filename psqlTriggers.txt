-- Drop the triggers
DROP TRIGGER IF EXISTS users_conflict_trigger ON users;
DROP TRIGGER IF EXISTS users_achievements_conflict_trigger ON users_achievements;
DROP TRIGGER IF EXISTS users_sessions_conflict_trigger ON users_sessions;
DROP TRIGGER IF EXISTS users_miles_conflict_trigger ON users_miles;
DROP TRIGGER IF EXISTS users_subscriptions_conflict_trigger ON users_subscriptions;
DROP TRIGGER IF EXISTS users_purchased_trails_conflict_trigger ON users_purchased_trails;

-- Drop the function
DROP FUNCTION IF EXISTS handle_insert_duplicate_conflict();

CREATE OR REPLACE FUNCTION handle_insert_duplicate_conflict()
RETURNS TRIGGER AS 46703
BEGIN
    -- If a conflict occurs, do nothing
    RETURN NEW;
EXCEPTION
    WHEN unique_violation THEN
        -- Handle the unique violation by ignoring it
        RETURN NULL;
END;
46703 LANGUAGE plpgsql;

CREATE TRIGGER users_conflict_trigger
BEFORE INSERT ON users
FOR EACH ROW
EXECUTE FUNCTION handle_insert_duplicate_conflict();

CREATE TRIGGER users_achievements_conflict_trigger
BEFORE INSERT ON users_achievements
FOR EACH ROW
EXECUTE FUNCTION handle_insert_duplicate_conflict();

CREATE TRIGGER users_sessions_conflict_trigger
BEFORE INSERT ON users_sessions
FOR EACH ROW
EXECUTE FUNCTION handle_insert_duplicate_conflict();

CREATE TRIGGER users_miles_conflict_trigger
BEFORE INSERT ON users_miles
FOR EACH ROW
EXECUTE FUNCTION handle_insert_duplicate_conflict();

CREATE TRIGGER users_subscriptions_conflict_trigger
BEFORE INSERT ON users_subscriptions
FOR EACH ROW
EXECUTE FUNCTION handle_insert_duplicate_conflict();

CREATE TRIGGER users_purchased_trails_conflict_trigger
BEFORE INSERT ON users_purchased_trails
FOR EACH ROW
EXECUTE FUNCTION handle_insert_duplicate_conflict();

